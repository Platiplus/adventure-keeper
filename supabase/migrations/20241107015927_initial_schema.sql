create table "public"."adventures_wod" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "short_description" text,
    "image_url" text,
    "looking_for_players" boolean default false,
    "is_active" boolean default false,
    "dg_master_id" uuid not null,
    "slug" text not null default ''::text,
    "created_at" timestamp with time zone not null default now()
);


alter table "public"."adventures_wod" enable row level security;

create table "public"."available_systems" (
    "id" bigint generated by default as identity not null,
    "name" text not null,
    "short_description" text,
    "image_url" text,
    "slug" text not null,
    "is_active" boolean not null default false
);


alter table "public"."available_systems" enable row level security;

create table "public"."user_profiles" (
    "id" uuid not null,
    "name" text not null,
    "user_name" text,
    "email" text not null,
    "avatar_url" text not null,
    "primary_system_id" bigint
);


alter table "public"."user_profiles" enable row level security;

CREATE UNIQUE INDEX adventures_wod_pkey ON public.adventures_wod USING btree (id);

CREATE UNIQUE INDEX adventures_wod_slug_key ON public.adventures_wod USING btree (slug);

CREATE UNIQUE INDEX available_systems_pkey ON public.available_systems USING btree (id);

CREATE UNIQUE INDEX user_profiles_pkey ON public.user_profiles USING btree (id);

alter table "public"."adventures_wod" add constraint "adventures_wod_pkey" PRIMARY KEY using index "adventures_wod_pkey";

alter table "public"."available_systems" add constraint "available_systems_pkey" PRIMARY KEY using index "available_systems_pkey";

alter table "public"."user_profiles" add constraint "user_profiles_pkey" PRIMARY KEY using index "user_profiles_pkey";

alter table "public"."adventures_wod" add constraint "adventures_wod_dg_master_id_fkey" FOREIGN KEY (dg_master_id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."adventures_wod" validate constraint "adventures_wod_dg_master_id_fkey";

alter table "public"."adventures_wod" add constraint "adventures_wod_slug_key" UNIQUE using index "adventures_wod_slug_key";

alter table "public"."user_profiles" add constraint "user_profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_id_fkey";

alter table "public"."user_profiles" add constraint "user_profiles_primary_system_id_fkey" FOREIGN KEY (primary_system_id) REFERENCES available_systems(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."user_profiles" validate constraint "user_profiles_primary_system_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.insert_new_user_profile_data()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$BEGIN
  insert into public.user_profiles(id, name, user_name, email, avatar_url, primary_system_id) values(new.id, new.raw_user_meta_data->>'name', new.raw_user_meta_data->>'user_name', new.raw_user_meta_data->>'email', new.raw_user_meta_data->>'avatar_url', NULL);
  return new;
END;$function$
;

create trigger create_user_profile_on_signup after insert on auth.users for each row execute function insert_new_user_profile_data();

grant delete on table "public"."adventures_wod" to "anon";

grant insert on table "public"."adventures_wod" to "anon";

grant references on table "public"."adventures_wod" to "anon";

grant select on table "public"."adventures_wod" to "anon";

grant trigger on table "public"."adventures_wod" to "anon";

grant truncate on table "public"."adventures_wod" to "anon";

grant update on table "public"."adventures_wod" to "anon";

grant delete on table "public"."adventures_wod" to "authenticated";

grant insert on table "public"."adventures_wod" to "authenticated";

grant references on table "public"."adventures_wod" to "authenticated";

grant select on table "public"."adventures_wod" to "authenticated";

grant trigger on table "public"."adventures_wod" to "authenticated";

grant truncate on table "public"."adventures_wod" to "authenticated";

grant update on table "public"."adventures_wod" to "authenticated";

grant delete on table "public"."adventures_wod" to "service_role";

grant insert on table "public"."adventures_wod" to "service_role";

grant references on table "public"."adventures_wod" to "service_role";

grant select on table "public"."adventures_wod" to "service_role";

grant trigger on table "public"."adventures_wod" to "service_role";

grant truncate on table "public"."adventures_wod" to "service_role";

grant update on table "public"."adventures_wod" to "service_role";

grant delete on table "public"."available_systems" to "anon";

grant insert on table "public"."available_systems" to "anon";

grant references on table "public"."available_systems" to "anon";

grant select on table "public"."available_systems" to "anon";

grant trigger on table "public"."available_systems" to "anon";

grant truncate on table "public"."available_systems" to "anon";

grant update on table "public"."available_systems" to "anon";

grant delete on table "public"."available_systems" to "authenticated";

grant insert on table "public"."available_systems" to "authenticated";

grant references on table "public"."available_systems" to "authenticated";

grant select on table "public"."available_systems" to "authenticated";

grant trigger on table "public"."available_systems" to "authenticated";

grant truncate on table "public"."available_systems" to "authenticated";

grant update on table "public"."available_systems" to "authenticated";

grant delete on table "public"."available_systems" to "service_role";

grant insert on table "public"."available_systems" to "service_role";

grant references on table "public"."available_systems" to "service_role";

grant select on table "public"."available_systems" to "service_role";

grant trigger on table "public"."available_systems" to "service_role";

grant truncate on table "public"."available_systems" to "service_role";

grant update on table "public"."available_systems" to "service_role";

grant delete on table "public"."user_profiles" to "anon";

grant insert on table "public"."user_profiles" to "anon";

grant references on table "public"."user_profiles" to "anon";

grant select on table "public"."user_profiles" to "anon";

grant trigger on table "public"."user_profiles" to "anon";

grant truncate on table "public"."user_profiles" to "anon";

grant update on table "public"."user_profiles" to "anon";

grant delete on table "public"."user_profiles" to "authenticated";

grant insert on table "public"."user_profiles" to "authenticated";

grant references on table "public"."user_profiles" to "authenticated";

grant select on table "public"."user_profiles" to "authenticated";

grant trigger on table "public"."user_profiles" to "authenticated";

grant truncate on table "public"."user_profiles" to "authenticated";

grant update on table "public"."user_profiles" to "authenticated";

grant delete on table "public"."user_profiles" to "service_role";

grant insert on table "public"."user_profiles" to "service_role";

grant references on table "public"."user_profiles" to "service_role";

grant select on table "public"."user_profiles" to "service_role";

grant trigger on table "public"."user_profiles" to "service_role";

grant truncate on table "public"."user_profiles" to "service_role";

grant update on table "public"."user_profiles" to "service_role";

create policy "Allows dungeon master to create adventures on their account"
on "public"."adventures_wod"
as permissive
for insert
to authenticated
with check ((( SELECT auth.uid() AS uid) = dg_master_id));


create policy "Enable dungeon masters to delete their own adventures"
on "public"."adventures_wod"
as permissive
for delete
to authenticated
using ((( SELECT auth.uid() AS uid) = dg_master_id));


create policy "Enable read access for all users"
on "public"."adventures_wod"
as permissive
for select
to authenticated
using (true);


create policy "Enables dungeon masters to update their own adventures"
on "public"."adventures_wod"
as permissive
for update
to authenticated
using ((( SELECT auth.uid() AS uid) = dg_master_id))
with check ((( SELECT auth.uid() AS uid) = dg_master_id));


create policy "Enable read access for all authenticated users"
on "public"."available_systems"
as permissive
for select
to authenticated
using (true);


create policy "Enable users to update their own profile"
on "public"."user_profiles"
as permissive
for update
to public
using ((( SELECT auth.uid() AS uid) = id));


create policy "Enable users to view profiles"
on "public"."user_profiles"
as permissive
for select
to authenticated
using (true);
